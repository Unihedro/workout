snd X plays a sound with a frequency equal to the value of X.
set X Y sets register X to the value of Y.
add X Y increases register X by the value of Y.
mul X Y sets register X to the result of multiplying the value contained in register X by the value of Y.
mod X Y sets register X to the remainder of dividing the value contained in register X by the value of Y (that is, it sets X to the result of X modulo Y).
rcv X recovers the frequency of the last sound played, but only when the value of X is not zero. (If it is zero, the command does nothing.)
jgz X Y jumps with an offset of the value of Y, but only if the value of X is greater than zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)
#!ruby
$h=Hash.new(){0}
#p g("b")
#exit
last=nil
ins=$<.map &:chomp
i=j=0
$f=->x,h,q,oq,k{ins[x]=~/(\S+) (.)(?: (.+))?/

g=->x{
x[/^-?\d+$/] ? x.to_i : h[x]
}
#p x,ins.size,ins[x],$2,$3,g($2),$h
 case $1
when 'snd'then (oq<< g[$2];
k<<1 if k) # part 1: last=g[$2]
when 'set'then h[$2] = g[$3]
when 'add'then (l=$2;r=$3;h[l] = g[l] + g[r])
when 'mul'then (l=$2;r=$3;h[l] = g[l] * g[r])
when 'mod'then (l=$2;r=$3;h[l] = g[l] % g[r])
when 'rcv'then q.any? ? ( h[$2]=q.shift ) : (next x) # part 1: g[$2]==0 ? (0) : (p last;exit)
when 'jgz'then (r=$3;g[$2] <= 0 ? (0) : (next x+g[r]))
end
x+1
}
#i=$f[0]
k=[]
$h2=Hash.new(){0}
$h2['p']=1
q1=[]
q2=[]
li=lj=nil
loop{li=i
i=$f[i,$h,q1,q2,nil]
lj=j
j=$f[j,$h2,q2,q1,k]
break if li==i&&lj==j}

p k.size
