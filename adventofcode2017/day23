snd X plays a sound with a frequency equal to the value of X.
set X Y sets register X to the value of Y.
add X Y increases register X by the value of Y.
mul X Y sets register X to the result of multiplying the value contained in register X by the value of Y.
mod X Y sets register X to the remainder of dividing the value contained in register X by the value of Y (that is, it sets X to the result of X modulo Y).
rcv X recovers the frequency of the last sound played, but only when the value of X is not zero. (If it is zero, the command does nothing.)
jgz X Y jumps with an offset of the value of Y, but only if the value of X is greater than zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)

$h=Hash.new(){0}
#p g("b")
#exit
last=nil
ins=$<.map &:chomp
i=j=0
iii=0
$f=->x,h{ins[x]=~/(\S+) (.)(?: (.+))?/

g=->x{
x[/^-?\d+$/] ? x.to_i : h[x]
}
p x#,ins.size,ins[x],$2,$3
 case $1
when 'set'then h[$2] = g[$3]
when 'add'then (l=$2;r=$3;h[l] = g[l] + g[r])
when 'sub'then (l=$2;r=$3;h[l] = g[l] - g[r])
when 'mul'then (l=$2;r=$3;h[l] = g[l] * g[r]
iii+=1)
when 'mod'then (l=$2;r=$3;h[l] = g[l] % g[r])
when 'rcv'then q.any? ? ( h[$2]=q.shift ) : (next x) # part 1: g[$2]==0 ? (0) : (p last;exit)
when 'jnz'then (r=$3
(g[$2] == 0) ? (0) : (next x+g[r]))
end
x+1
}
k=[]
$h2=Hash.new(){0}
$h2['a']=1
q1=[]
q2=[]
li=lj=nil
loop{li=i
i=$f[i,$h2]
break if i>=ins.size}

p iii
#!ruby
require'continuation'
d=e=f=g=h=0
c=b=93
b*=100
b+=100000
c=b
c+=17000
j2 = callcc {|cc| cc}
p h+=1 if (2...(b**0.5).to_i).any?{|d|
b%d==0
}
g=b
g-=c
(p h;exit)if g==0
b+=17
j2.call(j2)
